export ZONE=
curl -LO raw.githubusercontent.com/QUICK-GCP-LAB/2-Minutes-Labs-Solutions/refs/heads/main/Continuous%20Delivery%20with%20Jenkins%20in%20Kubernetes%20Engine/gsp051.sh

sudo chmod +x gsp051.sh

./gsp051.sh

Task 1. Download the source code
gcloud config set compute/zone 
gsutil cp gs://spls/gsp051/continuous-deployment-on-kubernetes.zip .
unzip continuous-deployment-on-kubernetes.zip
cd continuous-deployment-on-kubernetes

Task 2. Provisioning Jenkins
gcloud container clusters create jenkins-cd \
--num-nodes 2 \
--machine-type e2-standard-2 \
--scopes "https://www.googleapis.com/auth/source.read_write,cloud-platform"
gcloud container clusters get-credentials jenkins-cd

Task 3. Setup Helm
helm repo add jenkins https://charts.jenkins.io
helm repo update

Task 4. Configure and Install Jenkins
helm install cd jenkins/jenkins -f jenkins/values.yaml --wait
kubectl create clusterrolebinding jenkins-deploy --clusterrole=cluster-admin --serviceaccount=default:cd-jenkins

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &

Task 5. Connect to Jenkins
printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo

Task 7. Deploying the Application
cd sample-app
kubectl create ns production
kubectl apply -f k8s/production -n production
kubectl apply -f k8s/canary -n production
kubectl apply -f k8s/services -n production
kubectl scale deployment gceme-frontend-production -n production --replicas 4
kubectl get pods -n production -l app=gceme -l role=frontend
kubectl get pods -n production -l app=gceme -l role=backend

ask 8. Creating the Jenkins Pipeline
gcloud source repos create default
git init
git config credential.helper gcloud.sh
git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/default
git config --global user.email "[EMAIL_ADDRESS]"
git config --global user.name "[USERNAME]"
git add .
git commit -m "Initial commit"
git push origin master

Hereâ€™s how to set up Jenkins with Kubernetes integration and configure a pipeline job, along with the steps outlined for managing credentials and creating jobs.

---

### Add Global Credentials
1. In the Jenkins user interface, click **Manage Jenkins** in the left navigation menu.
2. Navigate to **Security > Credentials**.
3. Click **System**.
4. In the **Credentials** section, click **Global credentials (unrestricted)**.
5. Click **Add Credentials** in the top-right corner.
6. From the **Kind** drop-down menu, select **Google Service Account from metadata**.
7. In the **ID** field, enter your **Project ID** (found in the **CONNECTION DETAILS** section of the lab).
8. Click **Create** to finalize adding the credentials.

---

### Configure Jenkins Cloud for Kubernetes
1. In the Jenkins user interface, select **Manage Jenkins > Nodes**.
2. Click **Clouds** in the left navigation pane.
3. Click **New Cloud**.
4. Type any name under **Cloud name** and select **Kubernetes** from the **Type** drop-down menu.
5. Click **Create**.
6. Configure the following fields:
   - **Jenkins URL**: `http://cd-jenkins:8080`
   - **Jenkins Tunnel**: `cd-jenkins-agent:50000`
7. Click **Save** to complete the configuration.

---

### Create the Jenkins Job
1. Navigate to your Jenkins dashboard and click **New Item** in the left panel.
2. Enter **sample-app** as the project name.
3. Choose **Multibranch Pipeline** as the project type and click **OK**.
4. In the **Branch Sources** section:
   - Select **Git** from the **Add Source** drop-down.
   - Paste the HTTPS clone URL of your `sample-app` repository from Cloud Source Repositories into the **Project Repository** field, replacing `[PROJECT_ID]` with your actual Project ID:
     ```
     https://source.developers.google.com/p/[PROJECT_ID]/r/default
     ```
   - From the **Credentials** drop-down menu, select the credentials created in the earlier steps.
5. In the **Scan Multibranch Pipeline Triggers** section:
   - Check the **Periodically if not otherwise run** box.
   - Set the **Interval** to **1 minute**.
6. Leave all other options at their defaults and click **Save**.

---
Task 9. Creating the development environment
